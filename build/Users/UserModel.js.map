{"version":3,"sources":["../../src/Users/UserModel.js"],"names":["require","ObjectId","mongoose","Schema","Types","UserSchema","username","type","String","required","lowercase","unique","password","name","default","userClass","age","Number","location","picture","pre","next","bcrypt","hash","err","methods","validatePassword","compare","User","model"],"mappings":";;;;;;AACA;;;;AACA;;;;;;;;AAFAA,QAAQ,gBAAR;;;AAIA,IAAMC,WAAWC,mBAASC,MAAT,CAAgBC,KAAhB,CAAsBH,QAAvC;;AAEA,IAAMI,aAAa,IAAIH,mBAASC,MAAb,CAAoB;AACnCG,cAAU;AACNC,cAAMC,MADA;AAENC,kBAAU,IAFJ;AAGNC,mBAAW,IAHL;AAINC,gBAAQ;AAJF,KADyB;AAOnCC,cAAU;AACNL,cAAMC,MADA;AAENC,kBAAU;AAFJ,KAPyB;AAWnCI,UAAM;AACFN,cAAMC,MADJ;AAEFC,kBAAU,IAFR;AAGFK,iBAAS;AAHP,KAX6B;AAgBnCC,eAAW;AACPR,cAAMC,MADC;AAEPC,kBAAU,IAFH;AAGPK,iBAAS;AAHF,KAhBwB;AAqBnCE,SAAK;AACDT,cAAMU,MADL;AAEDR,kBAAU,IAFT;AAGAK,iBAAS;AAHT,KArB8B;AA0BnCI,cAAU;AACNX,cAAMC,MADA;AAENC,kBAAU,IAFJ;AAGLK,iBAAS;AAHJ,KA1ByB;AA+BnCK,aAAQ;AACJZ,cAAMC,MADF;AAEJC,kBAAU,IAFN;AAGJK,iBAAS;AAHL;AA/B2B,CAApB,CAAnB;;AAsCAT,WAAWe,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AAAA;;AAClCC,uBAAOC,IAAP,CAAY,KAAKX,QAAjB,EAA2B,EAA3B,EAA+B,UAACY,GAAD,EAAMD,IAAN,EAAe;AACvC,cAAKX,QAAL,GAAgBW,IAAhB;AACA,eAAOF,MAAP;AACJ,KAHH;AAID,CALH;;AAOEhB,WAAWoB,OAAX,CAAmBC,gBAAnB;AAAA,uEAAsC,iBAAed,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA,yDAC3BU,mBAAOK,OAAP,CAAef,QAAf,EAAyB,KAAKA,QAA9B,CAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtC;;AAAA;AAAA;AAAA;AAAA;;AAIF,IAAMgB,OAAO1B,mBAAS2B,KAAT,CAAe,MAAf,EAAuBxB,UAAvB,CAAb;;kBAEeuB,I","file":"UserModel.js","sourcesContent":["require(\"babel-polyfill\");\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\nconst ObjectId = mongoose.Schema.Types.ObjectId;\n\nconst UserSchema = new mongoose.Schema({\n    username: {\n        type: String,\n        required: true,\n        lowercase: true,\n        unique: true,\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    name: {\n        type: String,\n        required: true,\n        default: 'New Player'\n    },\n    userClass: {\n        type: String,\n        required: true,\n        default: 'Worker'\n    },\n    age: {\n        type: Number,\n        required: true,\n         default: 20\n    },\n    location: {\n        type: String,\n        required: true,\n         default: 'Somewhere, USA'\n    },\n    picture:{\n        type: String,\n        required: true,\n        default: \"media/images/default.jpg\"\n    }\n});\n\nUserSchema.pre('save', function(next) {\n    bcrypt.hash(this.password, 10, (err, hash) => {\n           this.password = hash;\n           return next();\n      });\n  });\n  \n  UserSchema.methods.validatePassword = async function(password){\n      return bcrypt.compare(password, this.password);\n  }\n\nconst User = mongoose.model('User', UserSchema);\n\nexport default User;"]}