{"version":3,"sources":["../../src/Middleware/Auth-Middleware.js"],"names":["LocalStrategy","require","User","JwtStrategy","Strategy","ExtractJwt","secret","jwtOptions","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","AuthMiddleware","localStrategy","username","password","done","findOne","then","user","validatePassword","isValid","_id","catch","err","jwtStrategy","payload","findById","sub","module","exports"],"mappings":"AAAA,MAAMA,gBAAgBC,QAAQ,gBAAR,CAAtB;AACA,MAAMC,OAAOD,QAAQ,oBAAR,CAAb;AACA,MAAME,cAAcF,QAAQ,cAAR,EAAwBG,QAA5C;AAAA,MACIC,aAAaJ,QAAQ,cAAR,EAAwBI,UADzC;;AAGA;AACA,MAAMC,SAAS,uBAAf;AACA,MAAMC,aAAa;AACfC,oBAAgBH,WAAWI,2BAAX,EADD;AAEfC,iBAAaJ;AAFE,CAAnB;;AAKA,MAAMK,iBAAiB;AACnBC,mBAAe,IAAIZ,aAAJ,CAAkB,CAACa,QAAD,EAAWC,QAAX,EAAqBC,IAArB,KAA8B;AAC3Db,aAAKc,OAAL,CAAa,EAAEH,QAAF,EAAb,EACCI,IADD,CACMC,QAAQ;AACV,gBAAG,CAACA,IAAJ,EAAU;AACNH,qBAAK,IAAL,EAAW,KAAX;AACH,aAFD,MAEO;AACHG,qBACCC,gBADD,CACkBL,QADlB,EAECG,IAFD,CAEMG,WAAW;AACb,wBAAGA,OAAH,EAAY;AACR,8BAAM,EAAEC,GAAF,EAAOR,QAAP,KAAoBK,IAA1B;AACA,+BAAOH,KAAK,IAAL,EAAW,EAAEM,GAAF,EAAOR,QAAP,EAAX,CAAP,CAFQ,CAE8B;AACzC,qBAHD,MAGO;AACH,+BAAOE,KAAK,IAAL,EAAW,KAAX,CAAP;AACH;AACJ,iBATD,EAUCO,KAVD,CAUOC,OAAO;AACV,2BAAOR,KAAKQ,GAAL,CAAP;AACH,iBAZD;AAaH;AACJ,SAnBD,EAoBCD,KApBD,CAoBOC,OAAOR,KAAKQ,GAAL,CApBd;AAqBH,KAtBc,CADI;AAwBnBC,iBAAa,IAAIrB,WAAJ,CAAgBI,UAAhB,EAA4B,CAACkB,OAAD,EAAUV,IAAV,KAAmB;AACxD;AACAb,aAAKwB,QAAL,CAAcD,QAAQE,GAAtB,EACCV,IADD,CACMC,QAAQ;AACV,gBAAIA,IAAJ,EAAU;AACNH,qBAAK,IAAL,EAAWU,QAAQE,GAAnB,EADM,CACmB;AAC5B,aAFD,MAEO;AACHZ,qBAAK,IAAL,EAAW,KAAX;AACH;AACJ,SAPD,EAQCO,KARD,CAQOC,OAAO;AACVR,iBAAKQ,GAAL;AACH,SAVD;AAWH,KAbY;AAxBM,CAAvB;;AAwCAK,OAAOC,OAAP,GAAiBlB,cAAjB","file":"Auth-Middleware.js","sourcesContent":["const LocalStrategy = require('passport-local');\nconst User = require('../Users/UserModel');\nconst JwtStrategy = require('passport-jwt').Strategy,\n    ExtractJwt = require('passport-jwt').ExtractJwt;\n\n// const JwtStrategy = PassportJWT.Strategy;\nconst secret = 'nobody tosses a dwarf';\nconst jwtOptions = {\n    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    secretOrKey: secret,\n};\n\nconst AuthMiddleware = {\n    localStrategy: new LocalStrategy((username, password, done) => {\n        User.findOne({ username })\n        .then(user => {\n            if(!user) {\n                done(null, false);\n            } else {\n                user\n                .validatePassword(password)\n                .then(isValid => {\n                    if(isValid) {\n                        const { _id, username } = user;\n                        return done(null, { _id, username }); //ends in req.user\n                    } else {\n                        return done(null, false);\n                    }\n                })\n                .catch(err => {\n                    return done(err);\n                });\n            }\n        })\n        .catch(err => done(err));\n    }),\n    jwtStrategy: new JwtStrategy(jwtOptions, (payload, done) => {\n        //here token was decoded successfully\n        User.findById(payload.sub)\n        .then(user => {\n            if (user) {\n                done(null, payload.sub); // <--req.user\n            } else {\n                done(null, false);\n            }\n        })\n        .catch(err => {\n            done(err);\n        });\n    }),\n}\n\nmodule.exports = AuthMiddleware;"]}