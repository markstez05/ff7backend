{"version":3,"sources":["../../src/Middleware/Auth-Middleware.js"],"names":["JwtStrategy","PassportJWT","Strategy","secret","jwtOptions","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","AuthMiddleware","localStrategy","LocalStrategy","username","password","done","User","findOne","then","user","validatePassword","isValid","_id","catch","err","jwtStrategy","payload","findById","sub"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,cAAcC,sBAAYC,QAAhC;AACA,IAAMC,SAAS,uBAAf;AACA,IAAMC,aAAa;AACfC,oBAAgBC,wBAAWC,2BAAX,EADD;AAEfC,iBAAaL;AAFE,CAAnB;;AAKA,IAAMM,iBAAiB;AACnBC,mBAAe,IAAIC,uBAAJ,CAAkB,UAACC,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA8B;AAC3DC,4BAAKC,OAAL,CAAa,EAAEJ,kBAAF,EAAb,EACCK,IADD,CACM,gBAAQ;AACV,gBAAG,CAACC,IAAJ,EAAU;AACNJ,qBAAK,IAAL,EAAW,KAAX;AACH,aAFD,MAEO;AACHI,qBACCC,gBADD,CACkBN,QADlB,EAECI,IAFD,CAEM,mBAAW;AACb,wBAAGG,OAAH,EAAY;AAAA,4BACAC,GADA,GACkBH,IADlB,CACAG,GADA;AAAA,4BACKT,SADL,GACkBM,IADlB,CACKN,QADL;;AAER,+BAAOE,KAAK,IAAL,EAAW,EAAEO,QAAF,EAAOT,mBAAP,EAAX,CAAP,CAFQ,CAE8B;AACzC,qBAHD,MAGO;AACH,+BAAOE,KAAK,IAAL,EAAW,KAAX,CAAP;AACH;AACJ,iBATD,EAUCQ,KAVD,CAUO,eAAO;AACV,2BAAOR,KAAKS,GAAL,CAAP;AACH,iBAZD;AAaH;AACJ,SAnBD,EAoBCD,KApBD,CAoBO;AAAA,mBAAOR,KAAKS,GAAL,CAAP;AAAA,SApBP;AAqBH,KAtBc,CADI;AAwBnBC,iBAAa,IAAIxB,WAAJ,CAAgBI,UAAhB,EAA4B,UAACqB,OAAD,EAAUX,IAAV,EAAmB;AACxD;AACAC,4BAAKW,QAAL,CAAcD,QAAQE,GAAtB,EACCV,IADD,CACM,gBAAQ;AACV,gBAAIC,IAAJ,EAAU;AACNJ,qBAAK,IAAL,EAAWW,QAAQE,GAAnB,EADM,CACmB;AAC5B,aAFD,MAEO;AACHb,qBAAK,IAAL,EAAW,KAAX;AACH;AACJ,SAPD,EAQCQ,KARD,CAQO,eAAO;AACVR,iBAAKS,GAAL;AACH,SAVD;AAWH,KAbY;AAxBM,CAAvB;;kBAwCed,c","file":"Auth-Middleware.js","sourcesContent":["import LocalStrategy from 'passport-local';\nimport PassportJWT, { ExtractJwt } from 'passport-jwt';\nimport User from '../Users/UserModel';\n\n\nconst JwtStrategy = PassportJWT.Strategy;\nconst secret = 'nobody tosses a dwarf';\nconst jwtOptions = {\n    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    secretOrKey: secret,\n};\n\nconst AuthMiddleware = {\n    localStrategy: new LocalStrategy((username, password, done) => {\n        User.findOne({ username })\n        .then(user => {\n            if(!user) {\n                done(null, false);\n            } else {\n                user\n                .validatePassword(password)\n                .then(isValid => {\n                    if(isValid) {\n                        const { _id, username } = user;\n                        return done(null, { _id, username }); //ends in req.user\n                    } else {\n                        return done(null, false);\n                    }\n                })\n                .catch(err => {\n                    return done(err);\n                });\n            }\n        })\n        .catch(err => done(err));\n    }),\n    jwtStrategy: new JwtStrategy(jwtOptions, (payload, done) => {\n        //here token was decoded successfully\n        User.findById(payload.sub)\n        .then(user => {\n            if (user) {\n                done(null, payload.sub); // <--req.user\n            } else {\n                done(null, false);\n            }\n        })\n        .catch(err => {\n            done(err);\n        });\n    }),\n}\n\nexport default AuthMiddleware;"]}