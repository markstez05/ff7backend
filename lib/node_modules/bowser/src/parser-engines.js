'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('./utils.js');

var _utils2 = _interopRequireDefault(_utils);

var _constants = require('./constants.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * More specific goes first
 */
exports.default = [
/* EdgeHTML */
{
  test: function test(parser) {
    return parser.getBrowserName(true) === 'microsoft edge';
  },
  describe: function describe(ua) {
    var isBlinkBased = /\sedg\//i.test(ua);

    // return blink if it's blink-based one
    if (isBlinkBased) {
      return {
        name: _constants.ENGINE_MAP.Blink
      };
    }

    // otherwise match the version and return EdgeHTML
    var version = _utils2.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, ua);

    return {
      name: _constants.ENGINE_MAP.EdgeHTML,
      version: version
    };
  }
},

/* Trident */
{
  test: [/trident/i],
  describe: function describe(ua) {
    var engine = {
      name: _constants.ENGINE_MAP.Trident
    };

    var version = _utils2.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      engine.version = version;
    }

    return engine;
  }
},

/* Presto */
{
  test: function test(parser) {
    return parser.test(/presto/i);
  },
  describe: function describe(ua) {
    var engine = {
      name: _constants.ENGINE_MAP.Presto
    };

    var version = _utils2.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      engine.version = version;
    }

    return engine;
  }
},

/* Gecko */
{
  test: function test(parser) {
    var isGecko = parser.test(/gecko/i);
    var likeGecko = parser.test(/like gecko/i);
    return isGecko && !likeGecko;
  },
  describe: function describe(ua) {
    var engine = {
      name: _constants.ENGINE_MAP.Gecko
    };

    var version = _utils2.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      engine.version = version;
    }

    return engine;
  }
},

/* Blink */
{
  test: [/(apple)?webkit\/537\.36/i],
  describe: function describe() {
    return {
      name: _constants.ENGINE_MAP.Blink
    };
  }
},

/* WebKit */
{
  test: [/(apple)?webkit/i],
  describe: function describe(ua) {
    var engine = {
      name: _constants.ENGINE_MAP.WebKit
    };

    var version = _utils2.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      engine.version = version;
    }

    return engine;
  }
}];