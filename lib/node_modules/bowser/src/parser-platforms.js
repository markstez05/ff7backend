'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('./utils.js');

var _utils2 = _interopRequireDefault(_utils);

var _constants = require('./constants.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Tablets go first since usually they have more specific
 * signs to detect.
 */

exports.default = [
/* Googlebot */
{
  test: [/googlebot/i],
  describe: function describe() {
    return {
      type: 'bot',
      vendor: 'Google'
    };
  }
},

/* Huawei */
{
  test: [/huawei/i],
  describe: function describe(ua) {
    var model = _utils2.default.getFirstMatch(/(can-l01)/i, ua) && 'Nova';
    var platform = {
      type: _constants.PLATFORMS_MAP.mobile,
      vendor: 'Huawei'
    };
    if (model) {
      platform.model = model;
    }
    return platform;
  }
},

/* Nexus Tablet */
{
  test: [/nexus\s*(?:7|8|9|10).*/i],
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.tablet,
      vendor: 'Nexus'
    };
  }
},

/* iPad */
{
  test: [/ipad/i],
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.tablet,
      vendor: 'Apple',
      model: 'iPad'
    };
  }
},

/* Amazon Kindle Fire */
{
  test: [/kftt build/i],
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.tablet,
      vendor: 'Amazon',
      model: 'Kindle Fire HD 7'
    };
  }
},

/* Another Amazon Tablet with Silk */
{
  test: [/silk/i],
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.tablet,
      vendor: 'Amazon'
    };
  }
},

/* Tablet */
{
  test: [/tablet(?! pc)/i],
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.tablet
    };
  }
},

/* iPod/iPhone */
{
  test: function test(parser) {
    var iDevice = parser.test(/ipod|iphone/i);
    var likeIDevice = parser.test(/like (ipod|iphone)/i);
    return iDevice && !likeIDevice;
  },
  describe: function describe(ua) {
    var model = _utils2.default.getFirstMatch(/(ipod|iphone)/i, ua);
    return {
      type: _constants.PLATFORMS_MAP.mobile,
      vendor: 'Apple',
      model: model
    };
  }
},

/* Nexus Mobile */
{
  test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.mobile,
      vendor: 'Nexus'
    };
  }
},

/* Mobile */
{
  test: [/[^-]mobi/i],
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.mobile
    };
  }
},

/* BlackBerry */
{
  test: function test(parser) {
    return parser.getBrowserName(true) === 'blackberry';
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.mobile,
      vendor: 'BlackBerry'
    };
  }
},

/* Bada */
{
  test: function test(parser) {
    return parser.getBrowserName(true) === 'bada';
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.mobile
    };
  }
},

/* Windows Phone */
{
  test: function test(parser) {
    return parser.getBrowserName() === 'windows phone';
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.mobile,
      vendor: 'Microsoft'
    };
  }
},

/* Android Tablet */
{
  test: function test(parser) {
    var osMajorVersion = Number(String(parser.getOSVersion()).split('.')[0]);
    return parser.getOSName(true) === 'android' && osMajorVersion >= 3;
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.tablet
    };
  }
},

/* Android Mobile */
{
  test: function test(parser) {
    return parser.getOSName(true) === 'android';
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.mobile
    };
  }
},

/* desktop */
{
  test: function test(parser) {
    return parser.getOSName(true) === 'macos';
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.desktop,
      vendor: 'Apple'
    };
  }
},

/* Windows */
{
  test: function test(parser) {
    return parser.getOSName(true) === 'windows';
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.desktop
    };
  }
},

/* Linux */
{
  test: function test(parser) {
    return parser.getOSName(true) === 'linux';
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.desktop
    };
  }
},

/* PlayStation 4 */
{
  test: function test(parser) {
    return parser.getOSName(true) === 'playstation 4';
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.tv
    };
  }
},

/* Roku */
{
  test: function test(parser) {
    return parser.getOSName(true) === 'roku';
  },
  describe: function describe() {
    return {
      type: _constants.PLATFORMS_MAP.tv
    };
  }
}];