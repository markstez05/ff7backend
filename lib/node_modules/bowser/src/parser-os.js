'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('./utils.js');

var _utils2 = _interopRequireDefault(_utils);

var _constants = require('./constants.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = [
/* Roku */
{
  test: [/Roku\/DVP/],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, ua);
    return {
      name: _constants.OS_MAP.Roku,
      version: version
    };
  }
},

/* Windows Phone */
{
  test: [/windows phone/i],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, ua);
    return {
      name: _constants.OS_MAP.WindowsPhone,
      version: version
    };
  }
},

/* Windows */
{
  test: [/windows/i],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, ua);
    var versionName = _utils2.default.getWindowsVersionName(version);

    return {
      name: _constants.OS_MAP.Windows,
      version: version,
      versionName: versionName
    };
  }
},

/* macOS */
{
  test: [/macintosh/i],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, ua).replace(/[_\s]/g, '.');
    var versionName = _utils2.default.getMacOSVersionName(version);

    var os = {
      name: _constants.OS_MAP.MacOS,
      version: version
    };
    if (versionName) {
      os.versionName = versionName;
    }
    return os;
  }
},

/* iOS */
{
  test: [/(ipod|iphone|ipad)/i],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, ua).replace(/[_\s]/g, '.');

    return {
      name: _constants.OS_MAP.iOS,
      version: version
    };
  }
},

/* Android */
{
  test: function test(parser) {
    var notLikeAndroid = !parser.test(/like android/i);
    var butAndroid = parser.test(/android/i);
    return notLikeAndroid && butAndroid;
  },
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, ua);
    var versionName = _utils2.default.getAndroidVersionName(version);
    var os = {
      name: _constants.OS_MAP.Android,
      version: version
    };
    if (versionName) {
      os.versionName = versionName;
    }
    return os;
  }
},

/* WebOS */
{
  test: [/(web|hpw)[o0]s/i],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, ua);
    var os = {
      name: _constants.OS_MAP.WebOS
    };

    if (version && version.length) {
      os.version = version;
    }
    return os;
  }
},

/* BlackBerry */
{
  test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, ua) || _utils2.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, ua) || _utils2.default.getFirstMatch(/\bbb(\d+)/i, ua);

    return {
      name: _constants.OS_MAP.BlackBerry,
      version: version
    };
  }
},

/* Bada */
{
  test: [/bada/i],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, ua);

    return {
      name: _constants.OS_MAP.Bada,
      version: version
    };
  }
},

/* Tizen */
{
  test: [/tizen/i],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, ua);

    return {
      name: _constants.OS_MAP.Tizen,
      version: version
    };
  }
},

/* Linux */
{
  test: [/linux/i],
  describe: function describe() {
    return {
      name: _constants.OS_MAP.Linux
    };
  }
},

/* Chrome OS */
{
  test: [/CrOS/],
  describe: function describe() {
    return {
      name: _constants.OS_MAP.ChromeOS
    };
  }
},

/* Playstation 4 */
{
  test: [/PlayStation 4/],
  describe: function describe(ua) {
    var version = _utils2.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, ua);
    return {
      name: _constants.OS_MAP.PlayStation4,
      version: version
    };
  }
}];