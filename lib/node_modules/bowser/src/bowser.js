'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!
owser - a browser detector
https://github.com/lancedikson/bowser
icense | (c) Dustin Diaz 2012-2015
icense | (c) Denis Demchenko 2015-2019



var _parser = require('./parser.js');

var _parser2 = _interopRequireDefault(_parser);

var _constants = require('./constants.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Bowser class.
 * Keep it simple as much as it can be.
 * It's supposed to work with collections of {@link Parser} instances
 * rather then solve one-instance problems.
 * All the one-instance stuff is located in Parser class.
 *
 * @class
 * @classdesc Bowser is a static object, that provides an API to the Parsers
 * @hideconstructor
 */
var Bowser = function () {
  function Bowser() {
    _classCallCheck(this, Bowser);
  }

  _createClass(Bowser, null, [{
    key: 'getParser',

    /**
     * Creates a {@link Parser} instance
     *
     * @param {String} UA UserAgent string
     * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it
     * explicitly. Same as `skipParsing` for {@link Parser}.
     * @returns {Parser}
     * @throws {Error} when UA is not a String
     *
     * @example
     * const parser = Bowser.getParser(window.navigator.userAgent);
     * const result = parser.getResult();
     */
    value: function getParser(UA) {
      var skipParsing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (typeof UA !== 'string') {
        throw new Error('UserAgent should be a string');
      }
      return new _parser2.default(UA, skipParsing);
    }

    /**
     * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately
     *
     * @param UA
     * @return {ParsedResult}
     *
     * @example
     * const result = Bowser.parse(window.navigator.userAgent);
     */

  }, {
    key: 'parse',
    value: function parse(UA) {
      return new _parser2.default(UA).getResult();
    }
  }, {
    key: 'BROWSER_MAP',
    get: function get() {
      return _constants.BROWSER_MAP;
    }
  }, {
    key: 'ENGINE_MAP',
    get: function get() {
      return _constants.ENGINE_MAP;
    }
  }, {
    key: 'OS_MAP',
    get: function get() {
      return _constants.OS_MAP;
    }
  }, {
    key: 'PLATFORMS_MAP',
    get: function get() {
      return _constants.PLATFORMS_MAP;
    }
  }]);

  return Bowser;
}();

exports.default = Bowser;