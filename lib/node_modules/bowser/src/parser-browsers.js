'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('./utils.js');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i; /**
                                                             * Browsers' descriptors
                                                             *
                                                             * The idea of descriptors is simple. You should know about them two simple things:
                                                             * 1. Every descriptor has a method or property called `test` and a `describe` method.
                                                             * 2. Order of descriptors is important.
                                                             *
                                                             * More details:
                                                             * 1. Method or property `test` serves as a way to detect whether the UA string
                                                             * matches some certain browser or not. The `describe` method helps to make a result
                                                             * object with params that show some browser-specific things: name, version, etc.
                                                             * 2. Order of descriptors is important because a Parser goes through them one by one
                                                             * in course. For example, if you insert Chrome's descriptor as the first one,
                                                             * more then a half of browsers will be described as Chrome, because they will pass
                                                             * the Chrome descriptor's test.
                                                             *
                                                             * Descriptor's `test` could be a property with an array of RegExps, where every RegExp
                                                             * will be applied to a UA string to test it whether it matches or not.
                                                             * If a descriptor has two or more regexps in the `test` array it tests them one by one
                                                             * with a logical sum operation. Parser stops if it has found any RegExp that matches the UA.
                                                             *
                                                             * Or `test` could be a method. In that case it gets a Parser instance and should
                                                             * return true/false to get the Parser know if this browser descriptor matches the UA or not.
                                                             */

var browsersList = [
/* Googlebot */
{
  test: [/googlebot/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Googlebot'
    };
    var version = _utils2.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
},

/* Opera < 13.0 */
{
  test: [/opera/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Opera'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
},

/* Opera > 13.0 */
{
  test: [/opr\/|opios/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Opera'
    };
    var version = _utils2.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/SamsungBrowser/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Samsung Internet for Android'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/Whale/i],
  describe: function describe(ua) {
    var browser = {
      name: 'NAVER Whale Browser'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/MZBrowser/i],
  describe: function describe(ua) {
    var browser = {
      name: 'MZ Browser'
    };
    var version = _utils2.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/focus/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Focus'
    };
    var version = _utils2.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/swing/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Swing'
    };
    var version = _utils2.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/coast/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Opera Coast'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/yabrowser/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Yandex Browser'
    };
    var version = _utils2.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/ucbrowser/i],
  describe: function describe(ua) {
    var browser = {
      name: 'UC Browser'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/Maxthon|mxios/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Maxthon'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/epiphany/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Epiphany'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/puffin/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Puffin'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/sleipnir/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Sleipnir'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/k-meleon/i],
  describe: function describe(ua) {
    var browser = {
      name: 'K-Meleon'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/micromessenger/i],
  describe: function describe(ua) {
    var browser = {
      name: 'WeChat'
    };
    var version = _utils2.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/qqbrowser/i],
  describe: function describe(ua) {
    var browser = {
      name: /qqbrowserlite/i.test(ua) ? 'QQ Browser Lite' : 'QQ Browser'
    };
    var version = _utils2.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/msie|trident/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Internet Explorer'
    };
    var version = _utils2.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/\sedg\//i],
  describe: function describe(ua) {
    var browser = {
      name: 'Microsoft Edge'
    };

    var version = _utils2.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/edg([ea]|ios)/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Microsoft Edge'
    };

    var version = _utils2.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/vivaldi/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Vivaldi'
    };
    var version = _utils2.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/seamonkey/i],
  describe: function describe(ua) {
    var browser = {
      name: 'SeaMonkey'
    };
    var version = _utils2.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/sailfish/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Sailfish'
    };

    var version = _utils2.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/silk/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Amazon Silk'
    };
    var version = _utils2.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/phantom/i],
  describe: function describe(ua) {
    var browser = {
      name: 'PhantomJS'
    };
    var version = _utils2.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/slimerjs/i],
  describe: function describe(ua) {
    var browser = {
      name: 'SlimerJS'
    };
    var version = _utils2.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
  describe: function describe(ua) {
    var browser = {
      name: 'BlackBerry'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/(web|hpw)[o0]s/i],
  describe: function describe(ua) {
    var browser = {
      name: 'WebOS Browser'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua) || _utils2.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/bada/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Bada'
    };
    var version = _utils2.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/tizen/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Tizen'
    };
    var version = _utils2.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/qupzilla/i],
  describe: function describe(ua) {
    var browser = {
      name: 'QupZilla'
    };
    var version = _utils2.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/firefox|iceweasel|fxios/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Firefox'
    };
    var version = _utils2.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/chromium/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Chromium'
    };
    var version = _utils2.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, ua) || _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/chrome|crios|crmo/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Chrome'
    };
    var version = _utils2.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
}, {
  test: [/GSA/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Google Search'
    };
    var version = _utils2.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
},

/* Android Browser */
{
  test: function test(parser) {
    var notLikeAndroid = !parser.test(/like android/i);
    var butAndroid = parser.test(/android/i);
    return notLikeAndroid && butAndroid;
  },
  describe: function describe(ua) {
    var browser = {
      name: 'Android Browser'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
},

/* PlayStation 4 */
{
  test: [/playstation 4/i],
  describe: function describe(ua) {
    var browser = {
      name: 'PlayStation 4'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
},

/* Safari */
{
  test: [/safari|applewebkit/i],
  describe: function describe(ua) {
    var browser = {
      name: 'Safari'
    };
    var version = _utils2.default.getFirstMatch(commonVersionIdentifier, ua);

    if (version) {
      browser.version = version;
    }

    return browser;
  }
},

/* Something else */
{
  test: [/.*/i],
  describe: function describe(ua) {
    /* Here we try to make sure that there are explicit details about the device
     * in order to decide what regexp exactly we want to apply
     * (as there is a specific decision based on that conclusion)
     */
    var regexpWithoutDeviceSpec = /^(.*)\/(.*) /;
    var regexpWithDeviceSpec = /^(.*)\/(.*)[ \t]\((.*)/;
    var hasDeviceSpec = ua.search('\\(') !== -1;
    var regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;
    return {
      name: _utils2.default.getFirstMatch(regexp, ua),
      version: _utils2.default.getSecondMatch(regexp, ua)
    };
  }
}];

exports.default = browsersList;