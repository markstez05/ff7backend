"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _defaults() {
  var data = _interopRequireDefault(require("lodash/defaults"));

  _defaults = function _defaults() {
    return data;
  };

  return data;
}

function _makeDir() {
  var data = require("make-dir");

  _makeDir = function _makeDir() {
    return data;
  };

  return data;
}

function _slash() {
  var data = _interopRequireDefault(require("slash"));

  _slash = function _slash() {
    return data;
  };

  return data;
}

function _path() {
  var data = _interopRequireDefault(require("path"));

  _path = function _path() {
    return data;
  };

  return data;
}

function _fs() {
  var data = _interopRequireDefault(require("fs"));

  _fs = function _fs() {
    return data;
  };

  return data;
}

var util = _interopRequireWildcard(require("./util"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }if (obj === null || (typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== "object" && typeof obj !== "function") {
    return { default: obj };
  }var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {
    return cache.get(obj);
  }var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }newObj.default = obj;if (cache) {
    cache.set(obj, newObj);
  }return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);var value = info.value;
  } catch (error) {
    reject(error);return;
  }if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }_next(undefined);
    });
  };
}

function outputFileSync(filePath, data) {
  (0, _makeDir().sync)(_path().default.dirname(filePath));

  _fs().default.writeFileSync(filePath, data);
}

function _default(_x) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref2) {
    var cliOptions = _ref2.cliOptions,
        babelOptions = _ref2.babelOptions;

    var filenames, write, _write, getDest, handleFile, _handleFile, handle, _handle, compiledFiles, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, filename, chokidar;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _handle = function _handle() {
              _handle = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(filenameOrDir) {
                var stat, dirname, count, files, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, filename, src, written, _filename, _written;

                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (_fs().default.existsSync(filenameOrDir)) {
                          _context3.next = 2;
                          break;
                        }

                        return _context3.abrupt("return", 0);

                      case 2:
                        stat = _fs().default.statSync(filenameOrDir);

                        if (!stat.isDirectory()) {
                          _context3.next = 39;
                          break;
                        }

                        dirname = filenameOrDir;
                        count = 0;
                        files = util.readdir(dirname, cliOptions.includeDotfiles);
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        _context3.prev = 10;
                        _iterator = files[Symbol.iterator]();

                      case 12:
                        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                          _context3.next = 22;
                          break;
                        }

                        filename = _step.value;
                        src = _path().default.join(dirname, filename);
                        _context3.next = 17;
                        return handleFile(src, dirname);

                      case 17:
                        written = _context3.sent;

                        if (written) count += 1;

                      case 19:
                        _iteratorNormalCompletion = true;
                        _context3.next = 12;
                        break;

                      case 22:
                        _context3.next = 28;
                        break;

                      case 24:
                        _context3.prev = 24;
                        _context3.t0 = _context3["catch"](10);
                        _didIteratorError = true;
                        _iteratorError = _context3.t0;

                      case 28:
                        _context3.prev = 28;
                        _context3.prev = 29;

                        if (!_iteratorNormalCompletion && _iterator.return) {
                          _iterator.return();
                        }

                      case 31:
                        _context3.prev = 31;

                        if (!_didIteratorError) {
                          _context3.next = 34;
                          break;
                        }

                        throw _iteratorError;

                      case 34:
                        return _context3.finish(31);

                      case 35:
                        return _context3.finish(28);

                      case 36:
                        return _context3.abrupt("return", count);

                      case 39:
                        _filename = filenameOrDir;
                        _context3.next = 42;
                        return handleFile(_filename, _path().default.dirname(_filename));

                      case 42:
                        _written = _context3.sent;
                        return _context3.abrupt("return", _written ? 1 : 0);

                      case 44:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this, [[10, 24, 28, 36], [29,, 31, 35]]);
              }));
              return _handle.apply(this, arguments);
            };

            handle = function handle(_x6) {
              return _handle.apply(this, arguments);
            };

            _handleFile = function _handleFile() {
              _handleFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(src, base) {
                var written, filename, dest;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return write(src, base);

                      case 2:
                        written = _context2.sent;


                        if (!written && cliOptions.copyFiles) {
                          filename = _path().default.relative(base, src);
                          dest = getDest(filename, base);

                          outputFileSync(dest, _fs().default.readFileSync(src));
                          util.chmod(src, dest);
                        }

                        return _context2.abrupt("return", written);

                      case 5:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this);
              }));
              return _handleFile.apply(this, arguments);
            };

            handleFile = function handleFile(_x4, _x5) {
              return _handleFile.apply(this, arguments);
            };

            getDest = function getDest(filename, base) {
              if (cliOptions.relative) {
                return _path().default.join(base, cliOptions.outDir, filename);
              }

              return _path().default.join(cliOptions.outDir, filename);
            };

            _write = function _write() {
              _write = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(src, base) {
                var relative, dest, res, mapLoc;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        relative = _path().default.relative(base, src);

                        if (util.isCompilableExtension(relative, cliOptions.extensions)) {
                          _context.next = 3;
                          break;
                        }

                        return _context.abrupt("return", false);

                      case 3:

                        relative = util.adjustRelative(relative, cliOptions.keepFileExtension);
                        dest = getDest(relative, base);
                        _context.prev = 5;
                        _context.next = 8;
                        return util.compile(src, (0, _defaults().default)({
                          sourceFileName: (0, _slash().default)(_path().default.relative(dest + "/..", src))
                        }, babelOptions));

                      case 8:
                        res = _context.sent;

                        if (res) {
                          _context.next = 11;
                          break;
                        }

                        return _context.abrupt("return", false);

                      case 11:

                        if (res.map && babelOptions.sourceMaps && babelOptions.sourceMaps !== "inline") {
                          mapLoc = dest + ".map";

                          res.code = util.addSourceMappingUrl(res.code, mapLoc);
                          res.map.file = _path().default.basename(relative);
                          outputFileSync(mapLoc, JSON.stringify(res.map));
                        }

                        outputFileSync(dest, res.code);
                        util.chmod(src, dest);

                        if (cliOptions.verbose) {
                          console.log(src + " -> " + dest);
                        }

                        return _context.abrupt("return", true);

                      case 18:
                        _context.prev = 18;
                        _context.t0 = _context["catch"](5);

                        if (!cliOptions.watch) {
                          _context.next = 23;
                          break;
                        }

                        console.error(_context.t0);
                        return _context.abrupt("return", false);

                      case 23:
                        throw _context.t0;

                      case 24:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this, [[5, 18]]);
              }));
              return _write.apply(this, arguments);
            };

            write = function write(_x2, _x3) {
              return _write.apply(this, arguments);
            };

            filenames = cliOptions.filenames;

            if (cliOptions.skipInitialBuild) {
              _context4.next = 40;
              break;
            }

            if (cliOptions.deleteDirOnStart) {
              util.deleteDir(cliOptions.outDir);
            }

            (0, _makeDir().sync)(cliOptions.outDir);
            compiledFiles = 0;
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context4.prev = 15;
            _iterator2 = cliOptions.filenames[Symbol.iterator]();

          case 17:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context4.next = 25;
              break;
            }

            filename = _step2.value;
            _context4.next = 21;
            return handle(filename);

          case 21:
            compiledFiles += _context4.sent;

          case 22:
            _iteratorNormalCompletion2 = true;
            _context4.next = 17;
            break;

          case 25:
            _context4.next = 31;
            break;

          case 27:
            _context4.prev = 27;
            _context4.t0 = _context4["catch"](15);
            _didIteratorError2 = true;
            _iteratorError2 = _context4.t0;

          case 31:
            _context4.prev = 31;
            _context4.prev = 32;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 34:
            _context4.prev = 34;

            if (!_didIteratorError2) {
              _context4.next = 37;
              break;
            }

            throw _iteratorError2;

          case 37:
            return _context4.finish(34);

          case 38:
            return _context4.finish(31);

          case 39:

            if (!cliOptions.quiet) {
              console.log("Successfully compiled " + compiledFiles + " " + (compiledFiles !== 1 ? "files" : "file") + " with Babel.");
            }

          case 40:

            if (cliOptions.watch) {
              chokidar = util.requireChokidar();

              filenames.forEach(function (filenameOrDir) {
                var watcher = chokidar.watch(filenameOrDir, {
                  persistent: true,
                  ignoreInitial: true,
                  awaitWriteFinish: {
                    stabilityThreshold: 50,
                    pollInterval: 10
                  }
                });
                ["add", "change"].forEach(function (type) {
                  watcher.on(type, function (filename) {
                    handleFile(filename, filename === filenameOrDir ? _path().default.dirname(filenameOrDir) : filenameOrDir).catch(function (err) {
                      console.error(err);
                    });
                  });
                });
              });
            }

          case 41:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[15, 27, 31, 39], [32,, 34, 38]]);
  }));
  return _ref.apply(this, arguments);
}